{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from g4f.client import Client\n",
    "import random\n",
    "import json\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Генерация текстов\n",
    "Сгенерирую тексты для различного набора комбинаций значений бинарных колонок с помощью ChatGPT. Далее на сгенерированном корпусе обучу языковую модель предсказывать вектор фичей по промпту."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "flags = [\n",
    "    \"рвота\",\n",
    "    \"одышка\",\n",
    "    \"потливость\",\n",
    "    \"головная боль\",\n",
    "    \"боль в груди\",\n",
    "    \"головокружение\",\n",
    "    \"потеря равновесия\",\n",
    "    \"отсутствие концентрации\"\n",
    "]\n",
    "\n",
    "# Функция для генерации случайного набора флагов\n",
    "def generate_random_flags():\n",
    "    return {flag: random.choice([True, False]) for flag in flags}\n",
    "\n",
    "# Функция для создания жалобы на основе флагов\n",
    "def generate_complaint(flags):\n",
    "    prompt = (\n",
    "        \"Сгенерируй разнообразный текст жалобы пациента от первого лица без переноса строк, у которого есть следующие симптомы:\\n\"\n",
    "        + \", \".join([flag for flag, present in flags.items() if present]) +\n",
    "        \" используй разные паттерны. Без лишних слов, только жалобы. Желательно использовать другие слова симптомов, чтобы был понятен контекст.\"\n",
    "    )\n",
    "    client = Client()\n",
    "    response = client.chat.completions.create(\n",
    "        model=\"gpt-4o-mini\",\n",
    "        messages=[{\"role\": \"user\", \"content\": prompt}],\n",
    "    )\n",
    "    return response.choices[0].message.content"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Генерация 1000 жалоб\n",
    "data = []\n",
    "\n",
    "for _ in range(1000):\n",
    "    flags = generate_random_flags()\n",
    "    complaint = generate_complaint(flags)\n",
    "    data.append({\"complaint\": complaint, \"flags\": flags})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Сохранение данных в JSON-файл\n",
    "with open(\"complaints_data.json\", \"w\", encoding=\"utf-8\") as f:\n",
    "    json.dump(data, f, ensure_ascii=False, indent=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Обучение модели\n",
    "Обучу небольшую GRU модель предсказывать вектор фичей по промпту. Проверю качество на hold-out валидации."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Достаем из сгенерированного корпуса тексты и векторы в отдельные переменные\n",
    "# и приводим их к удобному виду\n",
    "\n",
    "texts = [x['complaint'] for x in data]\n",
    "vecs = np.array([list(x['flags'].values()) for x in data]).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Выполняем сплит данных. На трейне обучимся, на тесте проверим качество\n",
    "\n",
    "X_train_texts, X_test_texts, y_train_vectors, y_test_vectors = train_test_split(texts,\n",
    "                                                                                vecs,\n",
    "                                                                                test_size=0.2,\n",
    "                                                                                random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Векторизую текста для подачи на вход в нейронную сеть\n",
    "\n",
    "vectorizer = TfidfVectorizer()\n",
    "X_train_tfidf = vectorizer.fit_transform(X_train_texts).toarray()\n",
    "X_test_tfidf = vectorizer.transform(X_test_texts).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Кладем на cuda переменные для возможности обучаться на гпу\n",
    "\n",
    "X_train_tensor = torch.FloatTensor(X_train_tfidf).to(device)\n",
    "y_train_tensor = torch.FloatTensor(y_train_vectors).to(device)\n",
    "X_test_tensor = torch.FloatTensor(X_test_tfidf).to(device)\n",
    "y_test_tensor = torch.FloatTensor(y_test_vectors).to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GRUNetwork(nn.Module):\n",
    "    \"\"\"\n",
    "    Инициализация нейронной сети\n",
    "    Кол-во входов 2047 - кол-во фичей у вектора tf-idf\n",
    "    Кол-во выходов 8 - кол-во фичей у выходного вектора\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        super(GRUNetwork, self).__init__()\n",
    "        self.gru = nn.GRU(input_size=2047, hidden_size=32,\n",
    "                          batch_first=True)\n",
    "        self.fc = nn.Linear(32, 8)\n",
    "\n",
    "    def forward(self, x):\n",
    "        # Прямое прохождение нейронной сети\n",
    "        x = x.unsqueeze(1)\n",
    "        out, _ = self.gru(x)\n",
    "        out = out[:, -1]\n",
    "        out = self.fc(out)\n",
    "\n",
    "        # Возвращаем сигмоиду для получения вероятностей\n",
    "        # по каждой фиче\n",
    "        return torch.sigmoid(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Создаем объекты класса модели, функции потерь и оптимизатора\n",
    "\n",
    "model = GRUNetwork().to(device)\n",
    "criterion = nn.BCELoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [100/1000], Loss: 0.5420\n",
      "Epoch [200/1000], Loss: 0.2821\n",
      "Epoch [300/1000], Loss: 0.1481\n",
      "Epoch [400/1000], Loss: 0.0862\n",
      "Epoch [500/1000], Loss: 0.0549\n",
      "Epoch [600/1000], Loss: 0.0376\n",
      "Epoch [700/1000], Loss: 0.0271\n",
      "Epoch [800/1000], Loss: 0.0204\n",
      "Epoch [900/1000], Loss: 0.0159\n",
      "Epoch [1000/1000], Loss: 0.0127\n"
     ]
    }
   ],
   "source": [
    "# Инициализируем цикл обучения на 1000 итераций\n",
    "\n",
    "num_epochs = 1000\n",
    "losses = []\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    \n",
    "    optimizer.zero_grad()\n",
    "    \n",
    "    outputs = model(X_train_tensor)\n",
    "    loss = criterion(outputs, y_train_tensor)\n",
    "    \n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "    losses.append(loss.item())\n",
    "\n",
    "    # Выводим логи каждые 100 итераций\n",
    "    if (epoch + 1) % 100 == 0:\n",
    "        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(losses)\n",
    "plt.grid()\n",
    "plt.xlabel('iter')\n",
    "plt.ylabel('loss value')\n",
    "plt.title('Loss graph')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Тестим модель на тестовых данных. Отсекаем значения фичей по вероятности 0.5\n",
    "\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    test_outputs = model(X_test_tensor)\n",
    "    predicted_vectors = (test_outputs > 0.5).float()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Доля полностью угаданных векторов 0.49\n",
      "Общая доля верно угаданных значений фичей по всем векторам 0.90\n"
     ]
    }
   ],
   "source": [
    "pred_real_eq = predicted_vectors.to('cpu').numpy() == y_test_tensor.to('cpu').numpy()\n",
    "\n",
    "print(f\"Доля полностью угаданных векторов {np.all(pred_real_eq, axis=1).sum() / pred_real_eq.shape[0]:.2f}\")\n",
    "print(f\"Общая доля верно угаданных значений фичей по всем векторам {pred_real_eq.sum() / pred_real_eq.shape[0] / pred_real_eq.shape[1]:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видно, что модель в половине случаев идеально предсказала векторы, что довольно мало. Однако доля всех верно угаданных значений фичей по всем векторам довольно высокая."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Сохраню модель\n",
    "\n",
    "torch.save(model.state_dict(), 'gru_prompt_to_8_vec_weights.pth')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
