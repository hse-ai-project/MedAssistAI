"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import logging
from json import loads
from logging.handlers import TimedRotatingFileHandler
import requests
import pandas as pd
import streamlit as st
from PIL import Image


class ServerException(Exception):
    pass


def setup_logger():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    logger_ = logging.getLogger("frontend")
    if not logger_.hasHandlers():
        logger_.setLevel(logging.DEBUG)
        handler = TimedRotatingFileHandler(
            "logs/logs.log", when="D", interval=1)
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        handler.setFormatter(formatter)
        logger_.addHandler(handler)
    return logger_


logger = setup_logger()

st.write(
    """
        # üë®üèº‚Äç‚öïÔ∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
        üî¨ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ (–ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö)
        """
)


def process_main_page():
    """
    –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, sidebar, –∫–Ω–æ–ø–∫–∏)
    """
    image = Image.open("data/ded.jpg")
    st.image(image)
    patients = process_side_bar_inputs()
    prompt_expander = st.expander("User Prompt")
    fit_expander = st.expander("Fit")
    set_model_expander = st.expander("Set model")
    predict_expander = st.expander("Predict")
    predict_proba_expander = st.expander("Predict proba")
    models_expander = st.expander("Models")
    update_model_expander = st.expander("Update model")
    participants_expander = st.expander("Participants")

    with prompt_expander:
        st.write(
            "## –ü–æ–∏—Å–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é")
        user_prompt_text = st.text_input(
            "–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ —Å–≤–æ–∏ —Å–∏–º–ø—Ç–æ–º—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
            placeholder="–í–æ–∑—Ä–∞—Å—Ç 52 –≥–æ–¥–∞, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 38.3, –∫—Ä—É–∂–∏—Ç—Å—è –≥–æ–ª–æ–≤–∞, –¥–∞–≤–ª–µ–Ω–∏–µ 120/70."
        )
        send_user_prompt_request = st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_user_prompt_request"
        )
        if send_user_prompt_request:
            logger.debug("'Prompt' button clicked")
            prompt_json_data = {"text": user_prompt_text}
            st.write("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            try:
                logger.debug("'Prompt' request has been sent")
                user_prompt_result = requests.post(
                    "http://fastapi:8000/model/predict_from_text",
                    json=prompt_json_data,
                    timeout=10,
                ).json()
                logger.debug("Got response from API for /predict_from_text")
                if "prediction" in user_prompt_result:
                    pred = [
                        (
                            "–£ –≤–∞—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–µ—Ä–¥–µ—á–Ω–æ–µ \
                            –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ! –°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É!"
                            if user_prompt_result["prediction"]["prediction"] == 1
                            else "–£ –≤–∞—Å –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π"
                        )
                    ]
                    pred_proba = [
                        str(round(user_prompt_result["prediction"]["probability"], 4))
                    ]
                    logger.debug("Prediction result: %s", str(pred))
                    logger.debug("Prediction proba result: %s", str(pred_proba))
                    write_prediction(pred)
                    st.table(
                        pd.DataFrame(
                            pred_proba,
                            columns=["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è"])
                    )
                else:
                    if "message" in user_prompt_result:
                        st.write(user_prompt_result['message'])
                    else:
                        st.write(user_prompt_result)
            except ServerException as err:
                logger.error(
                    "Cant get response from API for /predict_from_text: %s",
                    str(err))
                st.write("#### –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: ")
                st.write(
                    str(err)
                )  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç -
                # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É

    with fit_expander:
        st.write("## –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ \
                 –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        model_id = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", placeholder="best_model_in_the_world_1"
        )
        train_data = st.file_uploader(
            label="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª c –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏", type=["csv"]
        )
        params = st.file_uploader(
            label="–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Ñ–∞–π–ª c –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", type=["json"]
        )
        timeout = st.number_input(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ (—Å–µ–∫)",
            min_value=1,
            max_value=10000,
            value=10
        )
        send_fit_request = st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_fit_request")

        if send_fit_request:
            logger.debug("'Fit' button clicked")
            red_flag = (
                False
                # –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –Ω–µ –¥–∞—Å—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
            )
            if model_id is None or model_id == "":
                logger.error("No model_id in 'Fit'!")
                st.write("#### –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ID –º–æ–¥–µ–ª–∏!")
                red_flag = True
            if train_data is None:
                logger.error("No CSV-file in 'Fit'!")
                st.write("#### –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (CSV —Ñ–∞–π–ª)!")
                red_flag = True
            if params is None:
                logger.error("No hyperparameters in 'Fit'!")
                st.write("#### –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (JSON —Ñ–∞–π–ª)!")
                red_flag = True
            if timeout is None:
                logger.error("No timeout in 'Fit'!")
                st.write("#### –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞!")
                red_flag = True

            if not red_flag:
                st.write("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                train_df = pd.read_csv(train_data)
                x = train_df.drop(columns=["target"])
                features = {}
                for col in x.columns:
                    features[col] = x[col].to_list()
                target = train_df["target"].to_list()
                fit_json_data = {
                    "id": model_id,
                    "hyperparameters": loads(params.read()),
                    "train_data": {"features": features, "target": target},
                    "timeout": 10,
                }
                try:
                    logger.debug("'Fit' request has been sent")
                    fitting_result = requests.post(
                        "http://fastapi:8000/model/fit",
                        json=fit_json_data,
                        timeout=10
                    ).json()
                    logger.debug("Got response from API for /fit")
                    if "message" in fitting_result:
                        logger.debug(
                            "Fitting result: %s", str(
                                fitting_result["message"])
                        )
                        st.write(f"#### {fitting_result['message']}")
                    else:
                        logger.debug("Fitting result: %s", str(fitting_result))
                        st.write(fitting_result)
                except ServerException as err:
                    logger.error(
                        "Cant get response from API for /fit: %s", str(err))
                    st.write("#### –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: ")
                    st.write(
                        str(err)
                    )  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç -
                    # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É

    with set_model_expander:
        st.write(
            "## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–∫—Ç–∏–≤–Ω–æ–π \
            –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        model_id = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ ID –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏",
            placeholder="best_model_in_the_world_1"
        )
        send_set_model_request = st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_set_model_request"
        )
        if send_set_model_request:
            logger.debug("'Set model' button clicked")
            set_json_data = {"model_id": model_id}
            st.write("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            try:
                logger.debug("'Set model' request has been sent")
                set_model_result = requests.post(
                    "http://fastapi:8000/model/set_model",
                    json=set_json_data,
                    timeout=10,
                ).json()
                logger.debug("Got response from API for /set_model")
                if "detail" in set_model_result:  # –ø–æ–¥–Ω—è–ª—Å—è HTTPException
                    logger.debug(set_model_result["detail"])
                    st.write(f"#### {set_model_result['detail']}")
                elif "status" in set_model_result:
                    if set_model_result["status"] == "success":
                        logger.debug("Success setting model as active")
                        st.write(
                            f"#### –ú–æ–¥–µ–ª—å {model_id} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π")
                    else:
                        logger.debug(
                            "Setting model: %s", str(
                                set_model_result["status"])
                        )
                        st.write(
                            f"#### –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ \
                            –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–∫—Ç–∏–≤–Ω–æ–π: {set_model_result['status']}"
                        )
                else:
                    logger.debug("Setting model: %s", str(set_model_result))
                    st.write(set_model_result)
            except ServerException as err:
                logger.error(
                    "Cant get response from API for /set_model: %s",
                    str(err))
                st.write("#### –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: ")
                st.write(
                    str(err)
                )  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç -
                # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É

    with update_model_expander:
        st.write("## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        model_id = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            placeholder="best_model_in_the_world_1"
        )
        train_data = st.file_uploader(
            label="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª c –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
            type=["csv"]
        )
        send_update_model_request = st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_update_model_request"
        )

        if send_update_model_request:
            logger.debug("'Update model' button clicked")
            red_flag = False
            if model_id is None or model_id == "":
                st.write("#### –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ID –º–æ–¥–µ–ª–∏!")
                logger.error("No model_id in 'Update model'!")
                red_flag = True
            if train_data is None:
                st.write("#### –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (CSV —Ñ–∞–π–ª)!")
                logger.error("No CSV-file in 'Update model'!")
                red_flag = True

            if not red_flag:
                train_df = pd.read_csv(train_data)
                x = train_df.drop(columns=["target"])
                features = {}
                for col in x.columns:
                    features[col] = x[col].to_list()
                target = train_df["target"].to_list()
                update_json_data = {
                    "model_id": model_id,
                    "features": features,
                    "target": target,
                }
                st.write("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                try:
                    logger.debug("'Update model' request has been sent")
                    update_model_result = requests.post(
                        f"http://fastapi:8000/model/update_model/{model_id}",
                        json=update_json_data,
                        timeout=10,
                    ).json()
                    logger.debug(
                        "Got response from API for /update_model/%s", model_id)
                    if "message" in update_model_result:
                        logger.debug(
                            "Updating model: %s", str(
                                update_model_result["message"])
                        )
                        st.write(f"#### {update_model_result['message']}")
                    elif "detail" in update_model_result:
                        logger.debug(
                            "Updating model: %s", str(
                                update_model_result["detail"])
                        )
                        st.write(f"#### {update_model_result['detail']}")
                    else:
                        logger.debug(
                            "Updating model: %s",
                            str(update_model_result))
                        st.write(update_model_result)
                except ServerException as err:
                    logger.error(
                        "Cant get response from API for \
                        /update_model/{model_id}: %s",
                        str(err),
                    )
                    st.write("#### –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: ")
                    st.write(
                        str(err)
                    )  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç -
                    # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É

    with predict_expander:
        st.write("## –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        st.write(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å sidebar: –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª \
            –∏–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é"
        )
        send_predict_request = st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_predict_request")
        if send_predict_request:
            logger.debug("'Predict' button clicked")
            predict_json_data = {"patients": patients}
            st.write("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            try:
                logger.debug("'Predict' request has been sent")
                predict_model_result = requests.post(
                    "http://fastapi:8000/model/predict",
                    json=predict_json_data,
                    timeout=10,
                ).json()
                logger.debug("Got response from API for /predict")
                if "predictions" in predict_model_result:
                    pred = [
                        (
                            "–£ –≤–∞—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–µ—Ä–¥–µ—á–Ω–æ–µ \
                            –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ! –°—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É!"
                            if value["prediction"] == 1
                            else "–£ –≤–∞—Å –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π"
                        )
                        for value in predict_model_result["predictions"]
                    ]
                    logger.debug("Prediction result: %s", str(pred))
                    write_prediction(pred)
                elif "detail" in predict_model_result:
                    logger.debug(
                        "Prediction result: %s", str(
                            predict_model_result["detail"])
                    )
                    st.write(f"#### {predict_model_result['detail']}")
                else:
                    logger.debug(
                        "Prediction result: %s",
                        str(predict_model_result))
                    write_prediction(predict_model_result)
            except ServerException as err:
                logger.error(
                    "Cant get response from API for /predict: %s",
                    str(err))
                st.write("#### –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: ")
                st.write(
                    str(err)
                )  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç -
                # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É

    with predict_proba_expander:
        st.write("## –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è \
                 –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        st.write(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å sidebar: –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª \
            –∏–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é"
        )
        send_predict_proba_request = st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_predict_proba_request"
        )
        if send_predict_proba_request:
            logger.debug("'Predict proba' button clicked")
            predict_json_data = {"patients": patients}
            st.write("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            try:
                logger.debug(
                    "'Predict' (for predict probability) request has been sent"
                )
                predict_proba_model_result = requests.post(
                    "http://fastapi:8000/model/predict",
                    json=predict_json_data,
                    timeout=10,
                ).json()
                logger.debug("Got response from API for /predict")
                if "predictions" in predict_proba_model_result:
                    pred_proba = [
                        value["probability"]
                        for value in predict_proba_model_result["predictions"]
                    ]
                    logger.debug("Prediction result: %s", str(pred_proba))
                    write_prediction_proba(pred_proba)
                elif "detail" in predict_proba_model_result:
                    logger.debug(
                        "Prediction result: %s",
                        str(predict_proba_model_result["detail"]),
                    )
                    st.write(f"#### {predict_proba_model_result['detail']}")
                else:
                    probs = [row["probability"]
                             for row in predict_proba_model_result]
                    logger.debug("Prediction result: %s", str(probs))
                    write_prediction_proba(probs)
            except ServerException as err:
                logger.error(
                    "Cant get response from API for /predict: %s",
                    str(err))
                st.write("#### –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: ")
                st.write(
                    str(err)
                )  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç -
                # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É

    with models_expander:
        st.write("##  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π \
                 –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ö")
        send_models_request = st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_models_request")
        if send_models_request:
            logger.debug("'Models' button clicked")
            st.write("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            try:
                logger.debug("'Models' request has been sent")
                models_result = requests.get(
                    "http://fastapi:8000/model/models", timeout=10
                ).json()
                logger.debug("Got response from API for /models")
                if "models" in models_result:
                    write_models(models_result["models"])
                else:
                    write_models(models_result)
            except ServerException as err:
                logger.error(
                    "Cant get response from API for /models: %s",
                    str(err))
                st.write("#### –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: ")
                st.write(
                    str(err)
                )  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç -
                # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É

    with participants_expander:
        st.write("## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞")
        send_participants_request = st.button(
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_participants_request"
        )
        if send_participants_request:
            logger.debug("'Participants' button clicked")
            st.write("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            try:
                logger.debug("'Participants' request has been sent")
                participants_result = requests.get(
                    "http://fastapi:8000/participants", timeout=10
                ).json()["status"]
                logger.debug("Got response from API for /participants")
                write_participants(participants_result)
            except ServerException as err:
                logger.error(
                    "Cant get response from API for /participants: %s", str(
                        err)
                )
                st.write("#### –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: ")
                st.write(
                    str(err)
                )  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç -
                # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É


# –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç fastapi
def write_models(models):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    st.write("## –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    st.table(models)


def write_prediction(prediction):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    st.write("## –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑")
    st.table(pd.DataFrame(prediction, columns=["–î–∏–∞–≥–Ω–æ–∑"]))


def write_prediction_proba(prediction_probs):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    st.write("## –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞")
    st.table(
        pd.DataFrame(
            prediction_probs,
            columns=["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è"])
    )


def write_participants(participants):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    st.write("## –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:")
    st.write(participants)


def process_side_bar_inputs():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞ –æ –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö"""
    st.sidebar.header(
        "ü™™ –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ (–ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö) –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–≥–Ω–æ–∑–∞")
    user_input_df = sidebar_input_features()
    data = [row.to_dict() for _, row in user_input_df.iterrows()]
    st.write("## ü©∫ –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    st.table(user_input_df)
    return data


def sidebar_input_features():
    """
    –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ csv —Ñ–∞–π–ª
    –∏–ª–∏ —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é
    """

    uploaded_file = st.sidebar.file_uploader(
        label="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV  —Ñ–∞–π–ª", type=["csv"])

    st.sidebar.markdown("**–ò–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é**")
    age = st.sidebar.number_input("–í–æ–∑—Ä–∞—Å—Ç", 0, 120, 55)
    sex = st.sidebar.selectbox("–ü–æ–ª", ("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"))
    height = st.sidebar.number_input("–†–æ—Å—Ç", 50, 250, 170)
    weight = st.sidebar.number_input("–í–µ—Å", 10, 200, 75)
    ap_hi = st.sidebar.number_input("–í–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", 80, 200, 120)
    ap_lo = st.sidebar.number_input("–ù–∏–∂–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", 50, 150, 80)
    cholesterol = st.sidebar.slider(
        "–£—Ä–æ–≤–µ–Ω—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞", min_value=1, max_value=3, value=1, step=1
    )
    gluc = st.sidebar.slider(
        "–£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã", min_value=1, max_value=3, value=1, step=1
    )
    smoke = st.sidebar.selectbox(
        "–ö—É—Ä–∏—Ç–µ", ("–ù–µ—Ç", "–î–∞", "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ"))
    alco = st.sidebar.selectbox(
        "–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å", ("–ù–µ—Ç", "–î–∞", "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ")
    )
    active = st.sidebar.selectbox(
        "–ó–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é", ("–ù–µ—Ç",
                                               "–î–∞", "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ")
    )

    chest_pain_type = st.sidebar.selectbox(
        "–¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏",
        (
            "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ",
            "–ë–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω—ã–π",
            "–¢–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è",
            "–ê—Ç–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è",
            "–ù–µ–∞–Ω–≥–∏–Ω–æ–∑–Ω–∞—è –±–æ–ª—å",
        ),
    )
    resting_blood_pressure = st.sidebar.number_input(
        "–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è", 80, 200, 130
    )
    serum_cholestoral = st.sidebar.number_input(
        "–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –≤ –º–≥/–¥–ª)", 100, 300, 240)
    fasting_blood_sugar = st.sidebar.selectbox(
        "–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –Ω–∞—Ç–æ—â–∞–∫ –º–µ–Ω—å—à–µ 120 mg/d",
        ("–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ", "–ù–µ—Ç", "–î–∞"),
    )
    resting_electrocardiographic = st.sidebar.selectbox(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è",
        (
            "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ",
            "–ù–æ—Ä–º–∞",
            "–ù–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –∑—É–±—Ü–∞ ST-T (–∏–Ω–≤–µ—Ä—Å–∏—è –∑—É–±—Ü–∞ T –∏/–∏–ª–∏ –ø–æ–¥—ä–µ–º –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–µ ST > 0,05 –º–í)",
            "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ–π –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏–∏ –ª–µ–≤–æ–≥–æ –∂–µ–ª—É–¥–æ—á–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≠—Å—Ç–µ—Å–∞",
        ),
    )
    maximum_heart_rate_achieved = st.sidebar.number_input(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π", 70, 200, 150
    )
    exercise_induced_angina = st.sidebar.selectbox(
        "–ò–º–µ–µ—Ç—Å—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è, –≤—ã–∑–≤–∞–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π",
        ("–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ", "–ù–µ—Ç", "–î–∞"),
    )
    oldpeak = st.sidebar.slider(
        "–°–Ω–∏–∂–µ–Ω–∏–µ ST —Å–µ–≥–º–µ–Ω—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º—ã –≤—ã–∑–≤–∞–Ω–Ω—ã–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π",
        min_value=0,
        max_value=6,
        value=1,
        step=1,
    )
    slope_peak_st = st.sidebar.selectbox(
        "–ù–∞–∫–ª–æ–Ω —Å–µ–≥–º–µ–Ω—Ç–∞ ST –ø—Ä–∏ –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ",
        ("–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ", "–ü–ª–æ—Å–∫–∏–π", "–í–æ—Å—Ö–æ–¥—è—â–∏–π", "–ù–∏—Å—Ö–æ–¥—è—â–∏–π"),
    )
    vessels_colored_flourosopy = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–ø–Ω—ã—Ö —Å–æ—Å—É–¥–æ–≤", min_value=0, max_value=4, value=0, step=1
    )
    thallium_stress_test = st.sidebar.selectbox(
        "–¢–∞–ª–ª–∏–µ–≤—ã–π —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç",
        ("–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ", "–ù–æ—Ä–º–∞",
         "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç", "–û–±—Ä–∞—Ç–∏–º—ã–π –¥–µ—Ñ–µ–∫—Ç"),
    )

    translation = {
        "–ú—É–∂—Å–∫–æ–π": 1,
        "–ñ–µ–Ω—Å–∫–∏–π": 0,
        "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ": None,
        "–ù–µ—Ç": 0,
        "–î–∞": 1,
        "–ë–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω—ã–π": 3,
        "–¢–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è": 0,
        "–ê—Ç–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è": 1,
        "–ù–µ–∞–Ω–≥–∏–Ω–æ–∑–Ω–∞—è –±–æ–ª—å": 2,
        "–ù–æ—Ä–º–∞": 0,
        "–ù–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –∑—É–±—Ü–∞ ST-T (–∏–Ω–≤–µ—Ä—Å–∏—è –∑—É–±—Ü–∞ T –∏/–∏–ª–∏ –ø–æ–¥—ä–µ–º –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–µ ST > 0,05 –º–í)": 1,
        "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ–π –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏–∏ –ª–µ–≤–æ–≥–æ –∂–µ–ª—É–¥–æ—á–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≠—Å—Ç–µ—Å–∞": 2,
        "–ü–ª–æ—Å–∫–∏–π": 1,
        "–í–æ—Å—Ö–æ–¥—è—â–∏–π": 0,
        "–ù–∏—Å—Ö–æ–¥—è—â–∏–π": 2,
        "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç": 1,
        "–û–±—Ä–∞—Ç–∏–º—ã–π –¥–µ—Ñ–µ–∫—Ç": 2,
    }

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        logger.debug("Uplodead CSV file")
    else:
        df = pd.DataFrame(
            {
                # –ú–æ–¥–µ–ª—å 1
                "Age": age,
                "Sex": translation[sex],
                "CheastPainType": translation[chest_pain_type],
                "RestingBP": resting_blood_pressure,
                "Cholesterol": serum_cholestoral,
                "FastingBS": translation[fasting_blood_sugar],
                "RestingECG": translation[resting_electrocardiographic],
                "MaxHR": maximum_heart_rate_achieved,
                "ExerciseAngina": translation[exercise_induced_angina],
                "Oldpeak": oldpeak,
                "ST_Slope": translation[slope_peak_st],
                "NumMajorVessels": vessels_colored_flourosopy,
                "Thal": translation[thallium_stress_test],
                # –ú–æ–¥–µ–ª—å 2
                "age": age,
                "gender": translation[sex],
                "cholesterol": cholesterol,
                "height": height,
                "weight": weight,
                "ap_hi": ap_hi,
                "ap_lo": ap_lo,
                "gluc": gluc,
                "smoke": translation[smoke],
                "alco": translation[alco],
                "active": translation[active],
            },
            index=[0],
        )
    return df


if __name__ == "__main__":
    process_main_page()
